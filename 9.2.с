#define _CRT_SECURE_NO_WARNINGS
//#include "stdafx.h"
#include<stdio.h>
#include<conio.h>
#include<math.h>
#include<stdlib.h>
#include"libraries\mystring.h"
#include <locale.h>

#define min(a,b) (((a)<(b))?(a):(b))
#define max(a,b) (((a)>(b))?(a):(b))

#define OK 0
#define Error "Error"
#define MemoryError "Memory error"
#define ErrorIncorrectInput "Incorrect input"
#define OneSpaceRight ",!.?-)"
#define OneSpaceLeft "("


void* reallocList(void* str, int count, int sizeOfType);
void* mallocList(int count, int sizeOfType);
int outputText(char* s);
void freeTwoDArr(char** matrix, int rows);
void freeOneDArr(char* arr);
int inputCount(int* count);
int solutionFunc(char* str, int length, char*** listStr, int* counter);

int main() {
    setlocale(LC_ALL, "Russian");
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    char** listRows;
    int counter, length;
    char* str = (char*)mallocList(300, sizeof(char));
    gets(str);
    if (inputCount(&length)) {
        outputText(ErrorIncorrectInput);
        _getch();
        return !OK;
    }
    if (!solutionFunc(str, length, &listRows, &counter) && !outputText(join(listRows, counter, "\n"))) {
    }
    else {
        outputText("\n"Error);
    }
    freeTwoDArr(listRows, counter);
    freeOneDArr(str);
    _getch();
    return OK;
}

int solutionFunc(char* str, int length, char*** listRows, int* counter) {
    //replace(str, "  ", " ", -1);
    stdStr(str, &OneSpaceLeft, &OneSpaceRight);
    int n, h, lenRow, lenNewWord, cntWordsRow=0;
    *counter = 0;
    char** listStr = split(str, " ", &n);

    *listRows = (char**)mallocList(n, sizeof(char*));
    char *spaces, ** helpRow = (char**)mallocList(lenStr(str)+1, sizeof(char*));

    lenRow = lenStr(listStr[0]);
    helpRow[cntWordsRow++] = listStr[0];

    for (int i = 1; i <= n; ++i) {
        lenNewWord = lenStr(listStr[i%n]);
        if (length < lenRow + lenNewWord + 1 || i==n) {
            if (cntWordsRow == 1) {
                if (lenStr(helpRow[0]) > length) {
                    (*listRows)[(*counter)++] = subStr(helpRow[0], 0, length);
                    helpRow[0] = subStr(helpRow[0], length, lenStr(helpRow[0]));
                    lenRow -= length;
                    --i;
                    continue;
                }
                else {
                    (*listRows)[(*counter)++] = copyStr(helpRow[0]);
                }
            }
            else {
                h = (length - lenRow) / (cntWordsRow - 1);
                spaces=createNewString(h+1, ' ');
                (*listRows)[*counter] = (char*)reallocList(join(helpRow, cntWordsRow, spaces), length+1,sizeof(char));
                freeOneDArr(spaces);
                spaces=createNewString(h+2, ' ');
                replace((*listRows)[(*counter)++], subStr(spaces, 0, h+1), spaces, length - lenRow - (cntWordsRow - 1) * h);
                freeOneDArr(spaces);
            }
            if (i != n) {
                lenRow = lenNewWord;
                cntWordsRow = 0;
                helpRow[cntWordsRow++] = listStr[i];
            }
        }
        else {
            lenRow += lenNewWord + 1;
            helpRow[cntWordsRow++] = listStr[i];
        }
    }
    freeOneDArr(helpRow);
    freeTwoDArr(listStr, n);
    return OK;
}

int outputText(char* s) {
    printf(s);
    return OK;
}

void freeTwoDArr(char** matrix, int rows) {
    for (int i = 0; i < rows; ++i) {
        free(matrix[i]);
    }
    free(matrix);
}

void freeOneDArr(char* arr) {
    free(arr);
}

int inputCount(int* count) {
    printf("Enter count: ");
    return scanf("%i", count) == 0 || *count <= 0;
}

void* reallocList(void* str, int count, int sizeOfType) {
    return realloc(str, sizeOfType * count);
}

void* mallocList(int count, int sizeOfType) {
    return malloc(sizeOfType * count);
}
